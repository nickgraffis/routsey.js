function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
};

class Router {
  constructor(options) {
    _defineProperty(this, "routes", []);

    _defineProperty(this, "root", "/");

    _defineProperty(this, "add", (path, cb) => {
      this.routes.push({
        path,
        cb
      });
      return this;
    });

    _defineProperty(this, "remove", (path) => {
      for (let i = 0; i < this.routes.length; i += 1) {
        if (this.routes[i].path === path) {
          this.routes.slice(i, 1);
          return this;
        }
      }

      return this;
    });

    _defineProperty(this, "flush", () => {
      this.routes = [];
      return this;
    });

    _defineProperty(this, "clearSlashes", (path) =>
      path.toString().replace(/\/$/, "").replace(/^\//, "")
    );

    _defineProperty(this, "getFragment", () => {
      let fragment = "";

      const match = window.location.href.match(/#(.*)$/);
      fragment = match ? match[1] : "";
      
      return this.clearSlashes(fragment);
    });

    _defineProperty(this, "navigate", (path = "") => {
      window.location.href = `${window.location.href.replace(
        /#(.*)$/,
        ""
      )}#${path}`;

      return this;
    });

    _defineProperty(this, "listen", () => {
      clearInterval(this.interval);
      this.interval = setInterval(this.interval, 50);
    });

    _defineProperty(this, "interval", () => {
      if (this.current === this.getFragment()) return;
      this.current = this.getFragment();
      this.routes.some((route) => {
        const match = this.current.match(route.path);
        if (match) {
          match.shift();
          route.cb.apply({}, match);
          return match;
        }
        return false;
      });
    });
    if (options.root) this.root = options.root;
    this.listen();
  }
}

module.exports = Router;